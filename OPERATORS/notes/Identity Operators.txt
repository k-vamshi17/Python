			================================================================
					Identity Operators-----Applicable for Python Command Prompt
			================================================================
=>Identity Operators are used for Comparing the memory address of Two Objects.
=>In Python Programming, we have Two Types of Identity Operators. They are

			1. is operator
			2. is not operator
----------------------------------------------------------------------------------------------------------------------------------------------------------
1. is operator
----------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:      Object1  is  Object2
------------
=>Here "is" operator returns True provided Memory Address of Object1 and Object2 are same.
=>Here "is" operator returns False provided Memory Address of Object1 and Object2 are Different.
----------------------------------------------------------------------------------------------------------------------------------------------------------
2. is not operator
----------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:      Object1  is not  Object2
------------
=>Here "is not" operator returns True provided Memory Address of Object1 and Object2 are Different.
=>Here "is not " operator returns False provided Memory Address of Object1 and Object2 are Same.
----------------------------------------------------------------------------------------------------------------------------------------------------------
Examples
----------------------------------------------------------------------------------------------------------------------------------------------------------
NOTE1: a) For All the Deep Copy Objects, "is" Operator Returns True
	      b) For All the Deep Copy Objects, "is not " Operator Returns False

NOTE2:  a) For All the Shallow Copy Objects, "is" Operator Returns False
	      b) For All the Shallow Copy Objects, "is not " Operator Returns True

>>> lst1=[10,20,30]
>>> lst2=lst1 # Deep Copy
>>> print(lst1,id(lst1))-----------[10, 20, 30] 1927411931392
>>> print(lst2,id(lst2))-----------[10, 20, 30] 1927411931392
>>> lst1 is lst2---------------------True
>>> lst1 is not lst2----------------False
-------------------
>>> lst1=[10,20,30]
>>> lst2=lst1.copy() # Shallow Copy
>>> lst1 is lst2--------------------False
>>> lst1 is not lst2--------------True
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
>>> a=None
>>> b=None
>>> print(a,id(a))-------------None 140736143490768
>>> print(b,id(b))------------None 140736143490768
>>> a is b----------------------True
>>> a is not b-----------------False
----------------------------------------------------------------------
>>> d1={10:"Apple",20:"Mango"}
>>> d2={10:"Apple",20:"Mango"}
>>> print(d1,id(d1))-----------{10: 'Apple', 20: 'Mango'} 1927411857664
>>> print(d2,id(d2))-----------{10: 'Apple', 20: 'Mango'} 1927411857792
>>> d1 is d2--------------------False
>>> d1 is not d2--------------True
----------------------------------------------------------------------
>>> s1={10,20,30,40}
>>> s2={10,20,30,40}
>>> print(s1,id(s1))------------{40, 10, 20, 30} 1927411806976
>>> print(s2,id(s2))------------{40, 10, 20, 30} 1927411809440
>>> s1 is s2----------------------False
>>> s1 is not s2----------------True
-----------------
>>> ss1=frozenset({10,20,30,40})
>>> ss2=frozenset({10,20,30,40})
>>> print(ss1,id(ss1))----------frozenset({40, 10, 20, 30}) 1927411802720
>>> print(ss2,id(ss2))----------frozenset({40, 10, 20, 30}) 1927412463232
>>> ss1 is ss2--------------------False
>>> ss1 is not ss2--------------True
------------------------------------------------------------------------
>>> lst1=[10,"Python"]
>>> lst2=[10,"Python"]
>>> print(lst1,id(lst1))-------------[10, 'Python'] 1927411931392
>>> print(lst2,id(lst2))-------------[10, 'Python'] 1927411747200
>>> lst1 is lst2--------------------False
>>> lst1 is not lst2--------------True
-----------------------------
>>> tpl1=(10,"Python")
>>> tpl2=(10,"Python")
>>> print(tpl1,id(tpl1))----------(10, 'Python') 1927413222272
>>> print(tpl2,id(tpl2))----------(10, 'Python') 1927413223424
>>> tpl1 is tpl2-------------------False
>>> tpl1 is not tpl2--------------True
---------------------------------------------------------------
>>> r1=range(10,20)
>>> r2=range(10,20)
>>> print(r1,id(r1))---------------range(10, 20) 1927413264096
>>> print(r2,id(r2))---------------range(10, 20) 1927413264000
>>> r1 is r2------------------------False
>>> r1 is not r2-------------------True
--------------------
>>> b1=bytes([10,20,30])
>>> b2=bytes([10,20,30])
>>> b1 is b2------------False
>>> b1 is not  b2-----True
>>> ba1=bytearray([10,20,30])
>>> ba2=bytearray([10,20,30])
>>> ba1 is ba2--------False
>>> ba1 is not ba2---True
--------------------------------------------------------------------
Str Data----Same Case, Same Meaning and Same Order  gives Same Address otherwise Different Address
>>> s1="PYTHON"
>>> s2="PYTHON"
>>> print(s1,id(s1))------------PYTHON 1927411771520
>>> print(s2,id(s2))------------PYTHON 1927411771520
>>> s1 is s2----------------------True (Same Case, Same Meaning and Same Order  gives Same Address)
>>> s1 is not s2----------------False
>>> s1="HYD"
>>> s2="HYd"
>>> print(s1,id(s1))-------------HYD 1927413263424
>>> print(s2,id(s2))-------------HYd 1927413264864
>>> s1 is s2-----------------------False
>>> s1 is not s2------------------True
---------------------------------------------------------------------------------------
>>> a=2+2j
>>> b=2+2j
>>> print(a,id(a))------------(2+2j) 1927411876432
>>> print(b,id(b))------------(2+2j) 1927411876592
>>> a is b----------------------False
>>> a is not b----------------True
--------------------------------------------------------------------------------------
>>> a=True
>>> b=True
>>> print(a,id(a))---------------True 140736143490704
>>> print(b,id(b))---------------True 140736143490704
>>> a is b-------------------------True
>>> a is not b--------------------False
--------------------------------------------------------------------------------------
>>> a=1.2
>>> b=1.2
>>> print(a,id(a))-----------1.2 1927411876656
>>> print(b,id(b))-----------1.2 1927411881456
>>> a is b---------------------False
>>> a is not b----------------True
--------------------------------------------------------------------------------------
NOTE : 0 to 256 and -1 to -5 values present in Objects, Contains Same Address provided they must be single line assigment statement
>>> a=10
>>> b=10
>>> print(a,id(a))-------------------10 140736144284376
>>> print(b,id(b))-------------------10 140736144284376
>>> a is b------------------------------True
>>> a is not b-------------------------False
>>> a=256
>>> b=256
>>> print(a,id(a))-------------------- 256 140736144292248
>>> print(b,id(b))------------------- 256 140736144292248
>>> a is b----------------------------- True
>>> a is not b-----------------------  False
>>> a=257
>>> b=257
>>> print(a,id(a))--------------------257 1927411891344
>>> print(b,id(b))-------------------257 1927411891376
>>> a is b-----------------------------False
>>> a is not b------------------------True
>>> a=-1
>>> b=-1
>>> print(a,id(a))--------------------     -1 140736144284024
>>> print(b,id(b))---------------------   -1 140736144284024
>>> a is b--------------------------------- True
>>> a is not b---------------------------- False
>>> a=-5
>>> b=-5
>>> print(a,id(a))----------------------  -5 140736144283896
>>> print(b,id(b))----------------------  -5 140736144283896
>>> a is b--------------------------------  True
>>> a is not b---------------------------  False
>>> a=-6
>>> b=-6
>>> print(a,id(a))------------------------  -6 1927411891376
>>> print(b,id(b))------------------------  -6 1927411891344
>>> a is b----------------------------------  False
>>> a is not b----------------------------- True
**********************************************************************************************************
NOTE: All Fundamental Data Types Same Values  in Multiple Objects with Multi Line Assigment contains Same Address.
>>> a,b=300,300
>>> print(a,id(a))--------------300 1927411876592
>>> print(b,id(b))--------------300 1927411876592
>>> a is b-----------------------True
>>> a is not b------------------False
>>> a,b=1.2,1.2
>>> a is b------------------------True
>>> a is not b------------------False
---------------------------------------------------------------------
NOTE: All Other than Fundamental Data Types Same Values  in Multiple Objects with Multi Line Assigment contains Different  Address.
>>> lst1,lst2=[10,20,30],[10,20,30]
>>> print(lst1,id(lst1))-------------[10, 20, 30] 1927413224128
>>> print(lst2,id(lst2))-------------[10, 20, 30] 1927413231360
>>> lst1 is lst2----------------------False
>>> lst1 is not lst2----------------True
============================================================================================
