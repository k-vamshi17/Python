			===================================================
						Pre-Defined Functions in list
			===================================================
=>We know that On the object of list, we can Perform Both Indexing and slicing Operations.
=>With  Indexing and slicing Operations, we can Access the Value(s), and we Update the Value(s) of list object.
=>Along with Indexing and Slicing Operations, we can Perform Various Operations by using Pre-Defined function 
    present in list object. They are
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
1. append()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:  listobj.append(Value)
=>This function is used for Adding the Value at the end of existing value of list (called appending).
------------------
Examples
------------------
>>> lst=[10,"RS"]
>>> print(lst,type(lst),id(lst))--------[10, 'RS'] <class 'list'> 2844426144896
>>> lst.append("PYTHON")
>>> print(lst,type(lst),id(lst))---------[10, 'RS', 'PYTHON'] <class 'list'> 2844426144896
>>> lst.append(23.45)
>>> print(lst,type(lst),id(lst))---------[10, 'RS', 'PYTHON', 23.45] <class 'list'> 2844426144896
-------------------------------
>>> lst=[]
>>> print(lst,type(lst),id(lst))-------[] <class 'list'> 2844421411136
>>> len(lst)------------------------------0
>>> lst.append(10)
>>> lst.append(20)
>>> lst.append(10)
>>> lst.append("HYD")
>>> print(lst,type(lst),id(lst))-------[10, 20, 10, 'HYD'] <class 'list'> 2844421411136
>>> len(lst)------------------------------4
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
2. insert()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
=>syntax:  listobj.insert(index,Value)
=>This function is used for adding OR Inserting the Value at Specified Index and It can be either +ve or -ve
=>If we use Invalid +ve Index then Value Inserted as last value in list object
=>If we use Invalid -ve Index then Value Inserted as First value in list object
----------------
Examples
-----------------
>>> lst=[10,20,30,40,50,10,60,70]
>>> print(lst,type(lst),id(lst))---------[10, 20, 30, 40, 50, 10, 60, 70] <class 'list'> 2844426144896
>>> lst.insert(2,"RS")
>>> print(lst,type(lst),id(lst))-------[10, 20, 'RS', 30, 40, 50, 10, 60, 70] <class 'list'> 2844426144896
>>> lst.insert(0,2+3j)
>>> print(lst,type(lst),id(lst))-------[(2+3j), 10, 20, 'RS', 30, 40, 50, 10, 60, 70] <class 'list'> 2844426144896
---------------------------
>>> lst=[10,20,30,40,50]
>>> print(lst,type(lst),id(lst))--------------[10, 20, 30, 40, 50] <class 'list'> 2844421411136
>>> lst.insert(-1,155)
>>> print(lst,type(lst),id(lst))------------[10, 20, 30, 40, 155, 50] <class 'list'> 2844421411136
>>> lst.insert(-5,"RS")
>>> print(lst,type(lst),id(lst))------------[10, 'RS', 20, 30, 40, 155, 50] <class 'list'> 2844421411136
---------------
>>> lst=[10,"RS",34.56,"PYTHON"]
>>> print(lst)--------------------------[10, 'RS', 34.56, 'PYTHON']
>>> lst.insert(300,"HYD")
>>> print(lst)--------------------------[10, 'RS', 34.56, 'PYTHON', 'HYD']
>>> lst.insert(-400,"BANG")
>>> print(lst)--------------------------['BANG', 10, 'RS', 34.56, 'PYTHON', 'HYD']
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
3. remove() --------Based on value
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:    lstobj.remove(Value)
=>This Function is used for Removing the First Occurence of Specified Value from List object.
=>The Specified Value does not exist in list object then we get ValueError.
---------------------------
Examples
---------------------------
>>> lst=[10,"RS",45.67,"Python",2+3j]
>>> print(lst,type(lst),id(lst))---------[10, 'RS', 45.67, 'Python', (2+3j)] <class 'list'> 2326871134784
>>> lst.remove("Python")
>>> print(lst,type(lst),id(lst))-------[10, 'RS', 45.67, (2+3j)] <class 'list'> 2326871134784
>>> lst.remove(45.67)
>>> print(lst,type(lst),id(lst))-------[10, 'RS', (2+3j)] <class 'list'> 2326871134784
>>> lst.remove('RS')
>>> print(lst,type(lst),id(lst))------[10, (2+3j)] <class 'list'> 2326871134784
>>> lst.remove(100)------------------ValueError: list.remove(x): x not in list
--------------------------------------
>>> [].remove(100)--------------ValueError: list.remove(x): x not in list
>>> list().remove(120)----------ValueError: list.remove(x): x not in list
----------------------------
>>> lst=[10,20,10,30,10,40,50]
>>> print(lst,type(lst),id(lst))-----------[10, 20, 10, 30, 10, 40, 50] <class 'list'> 2326873933248
>>> lst.remove(10)
>>> print(lst,type(lst),id(lst))-----------[20, 10, 30, 10, 40, 50] <class 'list'> 2326873933248
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
4. pop(index)------Index Based Removal
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   listobj.pop(index)
=>Here Index can be either +ve or -ve
=>This Function is used for Removing the Value from List Object Based on Index.
=>If the Index is Invalid then we get IndexError
---------------------
Examples
---------------------
>>> lst=[10,20,10,30,10,40,50]
>>> print(lst,type(lst),id(lst))-------------[10, 20, 10, 30, 10, 40, 50] <class 'list'> 2326871134784
>>> lst.pop(4)-------------------------10
>>> print(lst,type(lst),id(lst))-----------[10, 20, 10, 30, 40, 50] <class 'list'> 2326871134784
>>> lst.pop(-4)---------------10
>>> print(lst,type(lst),id(lst))-------------------------------[10, 20, 30, 40, 50] <class 'list'> 2326871134784
>>> lst.pop(14)-------------IndexError: pop index out of range
----------------------
>>> [].pop(0)-------------IndexError: pop from empty list
>>> list().pop(1)---------IndexError: pop from empty list
----------------------------------------------------------------------------------------------------------------------------------------------------------------
5. pop()
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:   listobj.pop()
=>This function is used for Removing the Last Element of Non-empty List object.
=>When we call this function on empty list object then we get IndexError.
--------------------
Examples
--------------------
>>> lst=[10,"RS",45.67,"Python",2+3j]
>>> print(lst,type(lst),id(lst))------------[10, 'RS', 45.67, 'Python', (2+3j)] <class 'list'> 2326871134784
>>> lst.pop()---------------------------------(2+3j)
>>> print(lst,type(lst),id(lst))------------[10, 'RS', 45.67, 'Python'] <class 'list'> 2326871134784
>>> lst.pop()---------------------------------'Python'
>>> print(lst,type(lst),id(lst))-----------[10, 'RS', 45.67] <class 'list'> 2326871134784
>>> lst.pop()------------------------------45.67
>>> print(lst,type(lst),id(lst))-----------[10, 'RS'] <class 'list'> 2326871134784
----------------------
>>> [].pop()----------------IndexError: pop from empty list
>>> list().pop()------------IndexError: pop from empty list
----------------------------------------------------------------------------------------------------------------------------------------------------------------
6. clear()
----------------------------------------------------------------------------------------------------------------------------------------------------------------
=>This function is used for Removing all the Elements of Non-Empty List Object.
=>When we call this function on empty list object then we get Space or None as Result.
-----------------
Examples
-----------------
>>> lst=[10,"RS",45.67,"Python",2+3j]
>>> print(lst,id(lst))--------[10, 'RS', 45.67, 'Python', (2+3j)] 2326874122944
>>> len(lst)-------------------5
>>> lst.clear()
>>> print(lst,id(lst))--------[] 2326874122944
>>> len(lst)-----------------0
---------------------
>>> [].clear()-----------No Result / Space
		OR
>>> print([].clear())-------None
---------------------------------------------------------------------------------------------------------------------------------------------------------------
NOTE:   del Operator
----------
Syntax-1:   del  MutableObject[Index]---Removes Single Element from Mutable Object based on Index
Syntax-2:   del  MutableObject[Begin:End:Step]---Removes Multiple Elements from Mutable Object based on Slicing
Syntax-3:   del MultableObject OR Immutable Object-----Removes Complete Object with Content
										(Whose Physical memory space collected by Garbage Collector)
-----------------
Examples:
----------------
>>> lst=[10,"RS",45.67,"Python",2+3j,True,"HYD",23.45]
>>> print(lst,id(lst))--------------------[10, 'RS', 45.67, 'Python', (2+3j), True, 'HYD', 23.45] 2326874122944
>>> del lst[3:6]
>>> print(lst,id(lst))------------------[10, 'RS', 45.67, 'HYD', 23.45] 2326874122944
>>> lst=[10,"RS",45.67,"Python",2+3j,True,"HYD",23.45]
>>> del lst[1::2]
>>> print(lst,id(lst))------------[10, 45.67, (2+3j), 'HYD'] 2326871134784
-------------
>>> lst=[10,"RS",45.67,"Python",2+3j,True,"HYD",23.45]
>>> print(lst,id(lst))---------[10, 'RS', 45.67, 'Python', (2+3j), True, 'HYD', 23.45] 2326874122944
>>> del lst[::2]
>>> print(lst,id(lst))------------['RS', 'Python', True, 23.45] 2326874122944
---------------
>>> lst=[10,"RS",45.67,"Python",2+3j,True,"HYD",23.45]
>>> print(lst,id(lst))-------------[10, 'RS', 45.67, 'Python', (2+3j), True, 'HYD', 23.45] 2326871134784
>>> del lst
>>> print(lst)---------NameError: name 'lst' is not defined. 
-------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))----------------PYTHON <class 'str'>
>>> s[0]="J"-------------------------TypeError: 'str' object does not support item assignment
>>> del s[1]----------------TypeError: 'str' object doesn't support item deletion
>>> del s[::2]--------------TypeError: 'str' object does not support item deletion
>>> del s
>>> print(s)------------------NameError: name 's' is not defined
--------------------------------------------------------------------------------------------------------------------------------------------------------
7. index()
--------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:   listobj.index(Value)
=>This Function is used for Obtaining Index of First Occurence of Specified Value from List Object
=>If the Specified Value does not Exist in list object then we get ValueError.
-----------------
Examples
-----------------
>>> lst=[10,"RS",45.67,"Python",2+3j,True,"HYD",23.45]
>>> print(lst,type(lst))----------[10, 'RS', 45.67, 'Python', (2+3j), True, 'HYD', 23.45] <class 'list'>
>>> lst.index("Python")--------3
>>> lst.index(23.45)-------------7
>>> lst.index("BANG")----------ValueError: 'BANG' is not in list
--------------------------
>>> lst=[10,20,30,10,30,20,40,10,20]
>>> print(lst,type(lst))-------[10, 20, 30, 10, 30, 20, 40, 10, 20] <class 'list'>
>>> lst.index(10)--------------0
>>> lst.index(20)--------------1
>>> lst.index(100)-------------ValueError: 100 is not in list
---------------------------
NOTE:  enumerate()
=>This Function is used for Obtaining Index and Value of any Iterable Object
Syngtax:    for Index,value in enumerate(IterableObject):
				print(index,value)
------------------------
Examples
------------------------
>>> lst=[10,20,30,10,30,20,40,10,20]
>>> print(lst,type(lst))-----------[10, 20, 30, 10, 30, 20, 40, 10, 20] <class 'list'>
>>> for i,v in enumerate(lst):
...		print(i,"--->",v)
...
		0 ---> 10
		1 ---> 20
		2 ---> 30
		3 ---> 10
		4 ---> 30
		5 ---> 20
		6 ---> 40
		7 ---> 10
		8 ---> 20
>>> for i,v in enumerate(lst):
...		if(v==10):
...			print(i,"--->",v)
...
		0 ---> 10
		3 ---> 10
		7 ---> 10
>>> for i,v in enumerate(lst):
...		if(v==20):
...			print(i,"--->",v)
...
		1 ---> 20
		5 ---> 20
		8 ---> 20
>>>
>>> s="MISSISSIPPI"
>>> for i,v in enumerate(s):
...		print(i,"--->",v)
...
		0 ---> M
		1 ---> I
		2 ---> S
		3 ---> S
		4 ---> I
		5 ---> S
		6 ---> S
		7 ---> I
		8 ---> P
		9 ---> P
		10 ---> I
>>> for i,v in enumerate(s):
...		if(v=="S"):
...			print(i,"--->",v)
...
		2 ---> S
		3 ---> S
		5 ---> S
		6 ---> S
>>> for i,v in enumerate(s):
...		if(v=="I"):
...			print(i,"--->",v)
...
		1 ---> I
		4 ---> I
		7 ---> I
		10 ---> I
--------------------------
>>> a=10
>>> for index,val in enumerate(a):
...		print(index,"--->",val)----------------TypeError: 'int' object is not iterable
--------------------------------------------------------------------------------------------------------------------------------------------------------
8. count()
--------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:   listobj.count(Value)
=>This Function is used for Counting the Number of Occurences of Specified Value.
=>If the Specified Value does not exist in list then we get 0 as count.
-----------------------
Examples
-----------------------
>>> lst=[10,20,30,10,30,20,40,10,20]
>>> print(lst,type(lst))------------------[10, 20, 30, 10, 30, 20, 40, 10, 20] <class 'list'>
>>> lst.count(10)-------------------3
>>> lst.count(20)-------------------3
>>> lst.count(40)------------------1
>>> lst.count(400)----------------0
>>> lst.count("Python")---------0
>>> [].count(10)-------------------0
>>> list().count(10)---------------0
------------------------------------------
>>> s="MISSISSIIPPI"
>>> lst=list(s)
>>> print(lst)-----['M', 'I', 'S', 'S', 'I', 'S', 'S', 'I', 'I', 'P', 'P', 'I']
>>> lst.count("I")-----5
>>> lst.count("S")--------4
>>> lst.count("P")-----2
>>> lst.count("K")-----0
------------------------------------------------------------------------------------------------------------------------------------------------
9. extend()
------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   listobj1.extend(listobj2)
=>This function is used for Adding OR Merging all the Elements of listobj2 to listobj1
=>This Function can merge the value of listobj2 with listobj1 Only. But Not Poosible to Merge multiple List object values.To do this use + Operator
--------------------
Syntax:   listobj1=listobj1+listobj2+.....+listobj-n
---------------------
Examples
---------------------
>>> lst1=[10,20,30,40]
>>> lst2=["RS","TR","DR"]
>>> print(lst1)-------------[10, 20, 30, 40]
>>> print(lst2)-------------['RS', 'TR', 'DR']
>>> lst1.extend(lst2)
>>> print(lst1)-------------[10, 20, 30, 40, 'RS', 'TR', 'DR']
>>> print(lst2)-------------['RS', 'TR', 'DR']
----------------------
>>> lst1=[10,20,30,40]
>>> lst2=["RS","TR","DR"]
>>> lst2.extend(lst1)
>>> print(lst2)----------['RS', 'TR', 'DR', 10, 20, 30, 40]
>>> print(lst1)----------[10, 20, 30, 40]
---------------------------OR----------------------------------
>>> lst1=[10,20,30,40]
>>> lst2=["RS","TR","DR"]
>>> lst3=[1.2,2.3]
>>> lst1.extend(lst2,lst3)----------TypeError: list.extend() takes exactly one argument (2 given)
		TO Avoid the Above Error, we use the following
>>> lst1.extend(lst2)
>>> lst1.extend(lst3)
>>> print(lst1)-----------[10, 20, 30, 40, 'RS', 'TR', 'DR', 1.2, 2.3]
-------------------Another technique---------------------------
>>> lst1=[10,20,30,40]
>>> lst2=["RS","TR","DR"]
>>> lst3=[1.2,2.3]
>>> lst1=lst1+lst2+lst3  #Most Imp
>>> print(lst1)-------------------[10, 20, 30, 40, 'RS', 'TR', 'DR', 1.2, 2.3]
---------------------------------------------------------------------------------------------------------------------------------------------------
10. copy()
---------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   listobj2=listobj1.copy()
=>This function is used for copying the content of One List Object into another List object
   (Implements Shallow copy).
----------------------
Examples
----------------------
>>> lst1=[10,"RS"]
>>> lst2=lst1.copy() # Shallow Copy
>>> print(lst1,id(lst1))-------------[10, 'RS'] 1657822630464
>>> print(lst2,id(lst2))-------------[10, 'RS'] 1657822630272
>>> lst1.append("Python")
>>> lst2.insert(1,"Numpy")
>>> print(lst1,id(lst1))-------------[10, 'RS', 'Python'] 1657822630464
>>> print(lst2,id(lst2))-------------[10, 'Numpy', 'RS'] 1657822630272
----------------------------
Deep Copy Example
------------------------------
>>> lst1=[10,"RS"]
>>> lst2=lst1 #  Deep Copy
>>> print(lst1,id(lst1))------------[10, 'RS'] 1657825581184
>>> print(lst2,id(lst2))------------[10, 'RS'] 1657825581184
>>> lst1.append(100)
>>> print(lst1,id(lst1))------------[10, 'RS', 100] 1657825581184
>>> print(lst2,id(lst2))------------[10, 'RS', 100] 1657825581184
>>> lst2.insert(1,"Python")
>>> print(lst1,id(lst1))------------[10, 'Python', 'RS', 100] 1657825581184
>>> print(lst2,id(lst2))------------[10, 'Python', 'RS', 100] 1657825581184
--------------------------------------------------------------------------------------------------------------------------------------------------------
 11. reverse()
--------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:  lstobj2=lstobj1.reverse()
=>This function is used for reversing the content of list object and placed the Reversed Content itself.
=>The reverse() will reverse the Data of lstobj1 and placed the Reversed Content lstobj1 itself and never places in 
    lstobj2 and whose content is None.
--------------------
Examples
---------------------
>>> lst=[10,"RS",34.56,True,2+3j]
>>> print(lst,id(lst))----------[10, 'RS', 34.56, True, (2+3j)] 1657822630272
>>> lst1=lst.reverse()
>>> print(lst1)------------None
>>> print(lst,id(lst))------[(2+3j), True, 34.56, 'RS', 10] 1657822630272
---------------------------------
>>> lst=[10,12,-34,45,89,12]
>>> print(lst,id(lst))-----------[10, 12, -34, 45, 89, 12] 1657825581184
>>> lst.reverse()
>>> print(lst,id(lst))-----------[12, 89, 45, -34, 12, 10] 1657825581184
NOTE:
----------
>>> lst=[10,12,-34,45,89,12]
>>> print(lst,id(lst))--------------[10, 12, -34, 45, 89, 12] 1657826897600
>>> lst=lst[::-1]
>>> print(lst,id(lst))--------------[12, 89, 45, -34, 12, 10] 1657822630272
--------------------------------------------------------------------------------------------------------------------------------------------------------
11. sort()--Most Imp
-------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax-1:  listobj.sort()------------------------>Used Sorting the Homogeneous of  Data of list in ASCENDING ORDER
=>Syntax-2:  listobj.sort(reverse=False)--->Used Sorting the Homogeneous of  Data of list in ASCENDING ORDER
=>Syntax-3:  listobj.sort(reverse=True)--->Used Sorting the Homogeneous of  Data of list in DECENDING ORDER
--------------------
Examples
--------------------
>>> lst=[10,2,13,-12,56,3,7,12]
>>> print(lst,id(lst))---------[10, 2, 13, -12, 56, 3, 7, 12] 1657826897600
>>> lst.sort()
>>> print(lst,id(lst))---------[-12, 2, 3, 7, 10, 12, 13, 56] 1657826897600
>>> lst.reverse()
>>> print(lst,id(lst))---------[56, 13, 12, 10, 7, 3, 2, -12] 1657826897600
--------------------------
>>> lst=[10,2,13,-12,56,3,7,12]
>>> print(lst,id(lst))-----[10, 2, 13, -12, 56, 3, 7, 12] 1657826897600
>>> lst.sort(reverse=False)
>>> print(lst,id(lst))----------[-12, 2, 3, 7, 10, 12, 13, 56] 1657826897600
---------------------------
>>> lst=[10,2,13,-12,56,3,7,12]
>>> print(lst,id(lst))---------[10, 2, 13, -12, 56, 3, 7, 12] 1657822630272
>>> lst.sort(reverse=True)
>>> print(lst,id(lst))----------[56, 13, 12, 10, 7, 3, 2, -12] 1657822630272
--------------------------
>>> lst=["Zoom","Rossum","Anil","Rajesh","Babu"]
>>> print(lst,id(lst))-------------------['Zoom', 'Rossum', 'Anil', 'Rajesh', 'Babu'] 1657822630272
>>> lst.sort()
>>> print(lst,id(lst))------------------['Anil', 'Babu', 'Rajesh', 'Rossum', 'Zoom'] 1657822630272
-------------------------------
>>> lst=["Zoom","Rossum","Anil","Rajesh","Babu"]
>>> print(lst,id(lst))--------------['Zoom', 'Rossum', 'Anil', 'Rajesh', 'Babu'] 1657826897600
>>> lst.sort(reverse=True)
>>> print(lst,id(lst))--------------['Zoom', 'Rossum', 'Rajesh', 'Babu', 'Anil'] 1657826897600
-------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------