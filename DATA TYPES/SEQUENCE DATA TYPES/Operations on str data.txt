		==========================================================
						Operations on str data
		==========================================================
=>On str data,We can perform Two Types of Operations. They are

				1. Indexing Operation
				2. Slicing Operation
-----------------------------------------------------------------------------------------------------------------------------------------------------
1. Indexing Operation
-----------------------------------------------------------------------------------------------------------------------------------------------------
=>The Process of Obtaining One Value / Character from given str object by passing Index Value is called Indexing.
=>Syntax:  strobj[ Index ]
=>Here strobj is an object of <class, 'str'>
=>Here Index can be either +VE or -VE
=>If we Enter Valid Index then we get Corresponding value / character of that Index
=>If we Enter Invalid Index then we get IndexError.
--------------------
Examples
--------------------
>>> s="PYTHON"
>>> print(s,type(s))---------PYTHON <class 'str'>
>>> s[0]-----------------'P'
>>> s[1]-----------------'Y'
>>> s[5]-----------------'N'
>>> s[4]-----------------'O'
>>> s[2]-----------------'T'
>>> s[3]-----------------'H'
>>> s[-6]----------------'P'
>>> s[-1]----------------'N'
>>> s[-2]---------------'O'
>>> s[-5]----------------'Y'
>>> s[-3]----------------'H'
>>> s[-4]----------------'T'
>>> s[True]-------------'Y'
>>> s[-True]-----------'N'
>>> s[False]-----------'P'
>>> s[-False]----------'P'
>>> s[10]----------------IndexError: string index out of range
>>> s[-10]---------------IndexError: string index out of range
>>> s[0b1010-9]-------'Y'
>>> s[0x1]--------------'Y'
>>> s[-(0xF-14)]------'N'
----------------------
>>> "JAVA"[-1]------------'A'
>>> "JAVA"[-4]------------'J'
>>> "HYDERABAD"[0o1]-------'Y'
>>> "HYDERABAD"[0b1]-------'Y'
>>> "HYDERABAD"[0x1]-------'Y'
>>> "HYDERABAD"[01]------SyntaxError: leading zeros in decimal integer literals are not permitted;
>>> "Paypall"[02]-------------SyntaxError: leading zeros in decimal integer literals are not permitted

>>> "Paypall"[2]------------'y'
-----------------------------------------------------------------------------------------------------------------------------------------------------
2. Slicing Operation
-----------------------------------------------------------------------------------------------------------------------------------------------------
=>The Process of Obtaining Range of Chars / Values OR Sub String  from given str object is called Slicing Operations.
=>To Perform Slicing Operation, we have 5 Syntaxes. They are
*******************************************************************************************************
Syntax-1:   strobj[BEGIN:END]
*******************************************************************************************************
=>This Syntax gives Range of Chars/Values from BEGIN Index to END-1 Index Provided BEGIN < END Otherwise we get    Space or '   ' as Result
------------------------
Examples
-----------------------
>>> s="PYTHON"
>>> print(s,type(s))------------PYTHON <class 'str'>
>>> s[0:3]------------------------'PYT'
>>> s[2:5]------------------------'THO'
>>> s[5:2]------------------------' '
>>> print(s[5:2])----------------Space 
>>> s[0:5]------------------------'PYTHO'
>>> s[3:5]------------------------'HO'
>>> s[3:6]------------------------'HON'
>>> s[3:4]------------------------'H'
--------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))-------------PYTHON <class 'str'>
>>> s[-6:-2]-----------------------'PYTH'
>>> s[-6:-4]-----------------------'PY'
>>> s[-4:-1]-----------------------'THO'
>>> s[-2:-4]-----------------------' '
>>> s[-5:-1]-----------------------'YTHO'
>>> s[-4:-2]-----------------------'TH'
>>> s[-6:-1]------------------------'PYTHO'
>>> s[3:3]--------------------------' '
>>> s[-4:-4]------------------------' '
>>> s[-6:-5]------------------------'P'
***************************************************************************************
Sub Rule:   StrObj[POSBEG:NEGEND]  OR StrObj[NEGBEG: POSEND]
***************************************************************************************
>>> s="PYTHON"
>>> print(s)----------------PYTHON
>>> s[0:-4]-----------------'PY'
>>> s[0:-1]-----------------'PYTHO'
>>> s[-6:5]----------------'PYTHO'
>>> s[2:-1]-----------------'THO'
>>> s[-4:5]-----------------'THO'
>>> s[0:-2]----------------'PYTH'
>>> s[-3:6]----------------'HON'
-------------------------------------
Most Special Points
-------------------------------------
>>> s="PYTHON"
>>> print(s)---------------PYTHON
>>> s[4:-6]----------------' '
>>> s[3:-5]----------------' '
>>> s[2:-3]---------------'T'
>>> s[2:-6]---------------' '
>>> s[2:-4]----------------' '
------------------------
>>> s="PYTHON"
>>> print(s)----------------PYTHON
>>> s[-4:2]-----------------' ' 
>>> s[-2:2]----------------' '
>>> s[-2:5]----------------'O'
>>> s[-5:0]----------------' '
--------------------------------------------
>>> s="PYTHON"
>>> print(s)------------PYTHON
>>> s[0:125]-----------'PYTHON'
>>> s[-10:-1]-----------'PYTHO'
>>> s[2:1000]-----------'THON'
>>> s[-1000:-5]---------'P'
>>> s[-1000:-6]---------''
>>> s[-1000:1000]------'PYTHON'
>>> s[-1000:5]----------'PYTHO'
>>> s[-6:1000]-----------'PYTHON'
*******************************************************************************************************
Syntax-2:   strobj[BEGIN : ]
*******************************************************************************************************
=>In this Syntax, We are Specifying BEGIN Index and Not Specifying END Index.
=>If we don't Specify END Index then PVM Takes END Index as len(strobj).
				OR
=>If we don't Specify END Index then PVM Takes upto Last Character			
=>This Syntax gives of Range of Values from BEGIN Index to len(strobj)-1
				OR
=>This Syntax gives of Range of Values from BEGIN Index Character to Last Character.		
----------------------------------------
Examples
----------------------------------------
>>> s="PYTHON"
>>> print(s)-------------------------PYTHON
>>> s[0:]----------------------------'PYTHON'
>>> s[1:]----------------------------'YTHON'
>>> s[2:]----------------------------'THON'
>>> s[3:]-----------------------------'HON'
>>> s[5:]-----------------------------'N'
>>> s[4:]----------------------------'ON'
----------------------
>>> s="PYTHON"
>>> print(s)-----------------------PYTHON
>>> s[-6:]-------------------------'PYTHON'
>>> s[-4:]------------------------'THON'
>>> s[-5:]------------------------'YTHON'
>>> s[-2:]-----------------------'ON'
>>> s[-3:]------------------------'HON'
>>> s[-1:]------------------------'N'
--------------------------------------------
>>> s="PYTHON"
>>> print(s)------------PYTHON
>>> s[-1000:]---------'PYTHON'
>>> s[15:]-------------' '
>>> s[0b1010:]------' '
>>> s="PYTHON"
>>> s[-len("HYD"):]--------'HON'
*******************************************************************************************************
Syntax-3:   strobj[ :END]
*******************************************************************************************************
=>In this Syntax, we are specifying END Index But not Specifying BEGIN Index
=>If we don't Specify Begin Index then PVM Takes BEGIN Index as Either 0 or -len(strobj)
				OR
=>If we don't Specify Begin Index then PVM Takes First Character of str object
=>This Syntax gives of Range of Values from First strobj[0] OR strobj[-len(strobj)] to END-1 Index
				OR
=>This Syntax gives of Range of Values from First Character to END-1 Index Character
-------------------------------
Examples
-------------------------------
>>> s="PYTHON"
>>> print(s)----------------PYTHON
>>> s[:6]-------------------'PYTHON'
>>> s[:4]-------------------'PYTH'
>>> s[:5]-------------------'PYTHO'
>>> s[:2]-------------------'PY'
>>> s[:3]-------------------'PYT'
>>> s[:1]-------------------'P'
>>> s[:-1]------------------'PYTHO'
>>> s[:-3]------------------'PYT'
>>> s[:-2]------------------'PYTH'
>>> s[:-3]------------------'PYT'
>>> s[:-5]------------------'P'
>>> s[:-4]------------------'PY'
-----------------
>>> s="PYTHON"
>>> print(s)--------------PYTHON
>>> s[:100]--------------'PYTHON'
>>> s[:365]--------------'PYTHON'
>>> s[:len(s)-2]--------'PYTH'
*******************************************************************************************************
Syntax-4:   strobj[ : ]
*******************************************************************************************************
=>In this Syntax, we are not specifying BEGIN and END Index.
=>If we don't Specify BEGIN and END Indices then PVM Takes from First Letter to Last Letter (Comple Str Data )
-----------------------
Examples
-----------------------
>>> s="PYTHON"
>>> print(s)-------------------PYTHON
>>> s[:]------------------------'PYTHON'
>>> s[-100:]-------------------'PYTHON'
>>> s[:1000]------------------'PYTHON'
>>> s[0:]-----------------------'PYTHON'
>>> s[-6:]----------------------'PYTHON'
>>> s[-1000:1000]-----------'PYTHON'
>>> s="HYD is the Cap of TS"
>>> print(s)-----------------HYD is the Cap of TS
>>> s[:]-----------------------'HYD is the Cap of TS'
>>> s[-1000:1000]---------'HYD is the Cap of TS'
>>> s[-len(s):]---------------'HYD is the Cap of TS'
>>> s[:len(s)-1]--------------'HYD is the Cap of T'
>>> s[:len(s)]-----------------'HYD is the Cap of TS'

NOTE:In all the above 4 Syntaxes, we are Obtaining range of Values in FORWARD DIRECTION by maintaining Default 
           STEP as +1
*******************************************************************************************************
Syntax-5:   strobj[BEGIN:END:STEP]
*******************************************************************************************************
Rule-1: Here the Values of BEGIN,END and STEP can be either +VE or -VE
-----------
Rule-2:    If the Value of STEP is +VE then PVM gives the Range of  Chars in FORWARD DIRECTION from BEGIN Index  -----------  to END-1 Index Provided BEGIN < END otherwise we get Space or ' ' as Result
------------
Rule-3:   If the Value of STEP is -VE then  PVM gives the Range of  Chars in BACKWARD DIRECTION from BEGIN to ------------ END Index+1 provided BEGIN>END otherwise we get sapce or ' ' as Result.
------------
Rule-4:  When Extract the Values / Chars in FORWARD DIRECTION and if we specify END Index as 0 then we get ----------- Space or '  ' as Result.
-----------
Rule-5	When Extract the Values / Chars in BACKWARD DIRECTION and if we specify END Index as -1 then we get ----------- Space or '  ' as Result.
*******************************************************************************************************
Examples Rule-2
*******************************************************************************************************
>>> s="PYTHON"
>>> print(s)----------------PYTHON
>>> s[0:6:1]---------------'PYTHON'
>>> s[0:6]------------------'PYTHON'
>>> s[0:6:2]---------------'PTO'
>>> s[0:6:3]---------------'PH'
>>> s[1:5:2]---------------'YH'
>>> s[4:2:2]--------------''
>>> s[5:3:2]--------------''
-------------------------------
>>> s="PYTHON"
>>> print(s)------------------PYTHON
>>> s[-6:-1:1]---------------'PYTHO'
>>> s[-2:-6:2]---------------' '
>>> s[-6:-2:2]---------------'PT'
>>> s[-5:-1:3]---------------'YO'
>>> s[-4:-1:4]---------------'T'
---------------------
>>> s="PYTHON"
>>> print(s)--------------PYTHON
>>> s[:]-------------------'PYTHON'
>>> s[::]------------------'PYTHON'
>>> s[::2]---------------'PTO'
>>> s[::4]---------------'PO'
>>> s[::3]---------------'PH'
---------------------------------------------
>>> s="PYTHON"
>>> s[2:]------------------'THON'
>>> s[2::1]----------------'THON'
>>> s[3::2]----------------'HN'
>>> s[1::3]-----------------'YO'
>>> s[-6::2]----------------'PTO'
>>> s[-5::3]----------------'YO'
>>> s[-4:-1:2]-------------'TO'
--------------------------------------------------------
>>> s="PYTHON"
>>> s[-6:6]---------------'PYTHON'
>>> s[-6:6:1]------------'PYTHON'
>>> s[-6:6:2]------------'PTO'
>>> s[2:-1:2]------------'TO'
>>> s[1:-1:3]------------'YO'
>>> s[6:-2:2]------------''
>>> s[0:-6:2]-----------''
---------------------------------------------------
Rule-3 Examples
--------------------------------------------------
>>> s="PYTHON"
>>> print(s)-------------------------PYTHON
>>> s[::]-----------------------------'PYTHON'
>>> s[::-1]--------------------------'NOHTYP'
>>> s[5:1:-1]-----------------------'NOHT'
>>> s[4:0:-2]----------------------'OT'
>>> s[5:1:-3]---------------------------'NT'
>>> s[4::-2]----------------------------'OTP'
>>> s[:5:-1]-----------------------------''
>>> s[5::-1]-------------------------------'NOHTYP'
----------------------------------
>>> s="PYTHON"
>>> s[-1:-5:-1]-----------------------'NOHT'
>>> s[-1::-2]-------------------------'NHY'
>>> s[-2::-2]------------------------'OTP'
>>> s[-2::-3]-------------------------'OY'
>>> s[-1:-100:-1]------------------'NOHTYP'
>>> s[100::-1]----------------------'NOHTYP'
---------------------------------------------------------------------------------------------------------------------------------------------------
Example Rule-4
-------------------------------
>>> s="PYTHON"
>>> print(s)----------PYTHON
>>> s[::1]-------------'PYTHON'
>>> s[:0:1]-----------'  '
>>> s[:0:2]----------'  '
-----------------------------------------------------------------------------------------------------------------------------------------------
Example Rule-5
-------------------------------
>>> s="PYTHON"
>>> print(s)------------------PYTHON
>>> s[::-1]--------------------'NOHTYP'
>>> s[:-1:-1]-----------------'  '
>>> s[:-1:-2]---------------- '    '
>>> s[:-1:-3]----------------'    '
==========================================================================
MISC Examples
---------------------------------------------
>>> s="LIRIL"
>>> s[::-1]------------------'LIRIL'
>>> s="MADAM"
>>> s==s[::-1]--------------True
>>> s="MALAYALAM"
>>> s==s[::-1]-----------True
>>> s="RACECAR"
>>> s==s[::-1]----------True
>>> s="RADAR"
>>> s==s[::-1]------------True
>>> s="DAD"
>>> s==s[::-1]-----------True
>>> s="MOM"
>>> s==s[::-1]----------True
>>> s="PYTHON"
>>> s==s[::-1]----------False
>>> s="WOW"
>>> s==s[::-1]----------True
>>> s="KAYAK"
>>> s==s[::-1]----------True
--------------------------------------------------------------------
>>> s="1221"
>>> s==s[::-1]---------True
>>> s="12321"
>>> s==s[::-1]---------True
>>> s="1234"
>>> s==s[::-1]---------False
>>> s="8558"
>>> s==s[::-1]---------True
---------------------------------------------------------------------
