			===============================================================
					Pre-Defined functions in  dict
			===============================================================
=>On dict object, we can perform Inserting (Key,value) , Updating value of Value based on Key and we get value of Value by passing Value of Key. Along with these Operations, we can also perform the following Operations by using Pre-Defined Functions present in dict object. They are
---------------------------------------------------------------------------------------------------------------------------------------------------------
1) pop()
---------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:  dictobj.pop(key)
=>This function is used for Removing (Key,Value) from Non-Empty Dict object
=>If the the Value of Key does not exist then we get KeyError
---------------------------------------
Examples
---------------------------------------
>>> d1={100:1,200:2,300:3,400:6,500:5}
>>> print(d1,type(d1),id(d1))----{100: 1, 200: 2, 300: 3, 400: 6, 500: 5} <class 'dict'> 2526992355648
>>> d1.pop(300)----3
>>> print(d1,type(d1),id(d1))---{100: 1, 200: 2, 400: 6, 500: 5} <class 'dict'> 2526992355648
>>> d1.pop(200)---2
>>> print(d1,type(d1),id(d1))----{100: 1, 400: 6, 500: 5} <class 'dict'> 2526992355648
>>> d1.pop(400)----6
>>> print(d1,type(d1),id(d1))---{100: 1, 500: 5} <class 'dict'> 2526992355648
>>> d1.pop(800)--------KeyError: 800
>>> {}.pop(10)------------KeyError: 10
>>> dict().pop(10)-------KeyError: 10
---------------------------------------------------------------------------------------------------------------------------------------------------------
2) popitem()
---------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    dictobj.popitem()
=>This Function is used for Removing last (key,value) from non-empty dict object
=>If we call this function on empty dict object then we get KeyError
---------------------------
>>> d1={100:1,200:2,300:3,400:6,500:5}
>>> print(d1,type(d1),id(d1))---------{100: 1, 200: 2, 300: 3, 400: 6, 500: 5} <class 'dict'> 2526993811776
>>> d1.popitem()---------(500, 5)
>>> print(d1,type(d1),id(d1))--------{100: 1, 200: 2, 300: 3, 400: 6} <class 'dict'> 2526993811776
>>> d1.popitem()----------------(400, 6)
>>> print(d1,type(d1),id(d1))-------{100: 1, 200: 2, 300: 3} <class 'dict'> 2526993811776
>>> d1.popitem()-----------(300, 3)
>>> print(d1,type(d1),id(d1))---------{100: 1, 200: 2} <class 'dict'> 2526993811776
>>> d1.popitem()-----------(200, 2)
>>> print(d1,type(d1),id(d1))-----------{100: 1} <class 'dict'> 2526993811776
>>> d1.popitem()---------------(100, 1)
>>> print(d1,type(d1),id(d1))-----------------{} <class 'dict'> 2526993811776
>>> d1.popitem()-------KeyError: 'popitem(): dictionary is empty'
>>> {}.popitem()-----------KeyError: 'popitem(): dictionary is empty'
>>> dict().popitem()-----KeyError: 'popitem(): dictionary is empty'
---------------------------------------------------------------------------------------------------------------------------------------------------------
3) clear()
---------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:   dictobj.clear()
=>This Function is used for Removing all the entries of non-empty dict object.
=>When we call this function on empty dict object then we get Space OR None as Result
-----------------------------
Examples
-----------------------------
>>> d1={10:1.2,20:2.3,40:1.3,50:1.2}
>>> print(d1,type(d1),id(d1))------------{10: 1.2, 20: 2.3, 40: 1.3, 50: 1.2} <class 'dict'> 2416990586624
>>> len(d1)------------------------------4
>>> d1.clear()
>>> print(d1,type(d1),id(d1))----------{} <class 'dict'> 2416990586624
>>> len(d1)-------------------------------0
----------------------------------------------
>>> {}.clear()------------------Space
>>> print({}.clear())----------None
			OR
>>> dict().clear()-------------Space
>>> print(dict().clear())-----None
-----------------------------------------------------------------------------------------------------------------------------------
4) copy()
-----------------------------------------------------------------------------------------------------------------------------------
Syntax:   dictobj2=dictobj1.copy()
=>This Function is used for Copying the content of Dictobj1 into DictObj2
---------------------------
Examples
---------------------------
>>> d1={10:1.2,20:2.3,40:1.3,50:1.2}
>>> print(d1,type(d1),id(d1))-----------{10: 1.2, 20: 2.3, 40: 1.3, 50: 1.2} <class 'dict'> 2416990771328
>>> d2=d1.copy()
>>> print(d2,type(d2),id(d2))-----------{10: 1.2, 20: 2.3, 40: 1.3, 50: 1.2} <class 'dict'> 2416990586624
>>> d1[10]=2.3
>>> d2[10]=6.7
>>> print(d1,type(d1),id(d1))-----------{10: 2.3, 20: 2.3, 40: 1.3, 50: 1.2} <class 'dict'> 2416990771328
>>> print(d2,type(d2),id(d2))-----------{10: 6.7, 20: 2.3, 40: 1.3, 50: 1.2} <class 'dict'> 2416990586624
-----------------------------------------------------------------------------------------------------------------------------------
5) get()-------Most Imp
-----------------------------------------------------------------------------------------------------------------------------------
=>Syntax:  val=dictobj.get(Key)
=>This Function is used for Obtaining the value of Value by passing Value of Key
=>if the value of key does not Exist then we get None OR Space  as a Result
				OR
Syntax:     dictobj[Key]
=>This Syntax also gives value of value by passing Value of Key
=>if the value of key does not Exist then we get KeyError
---------------------------------------
Examples
---------------------------------------
>>> d1={10:1.2,20:2.3,40:1.3,50:1.2}
>>> print(d1)-----------------{10: 1.2, 20: 2.3, 40: 1.3, 50: 1.2}
>>> bal=d1.get(10)
>>> print(bal)----------------1.2
>>> bal=d1.get(20)
>>> print(bal)---------------2.3
>>> bal=d1.get(100)
>>> print(bal)---------------None
>>> d1.get(120)-------------Space as Result
-------------------------------------------
>>> print({}.get(10))---------None
>>> print(dict().get(100))---None
>>> {10:1.2,20:1.2,30:3.4}.get(30)---------3.4
---------------------------------------------------
>>> d1={10:1.2,20:2.3,40:1.3,50:1.2}
>>> print(d1)-------------{10: 1.2, 20: 2.3, 40: 1.3, 50: 1.2}
>>> d1[10]----------------1.2
>>> d1[20]----------------2.3
>>> d1[200]---------------KeyError: 200
-----------------------------------------------------------------------------------------------------------------------------------
6) keys()
-----------------------------------------------------------------------------------------------------------------------------------
Syntax:       varname=dictobj.keys()
=>This Function is used for Obtaining set of Keys and placed in LHS Var Name and whose type <class,dict_keys>
--------------------
Examples
--------------------
>>> d1={10:1.2,20:2.3,40:1.3,50:1.2}
>>> print(d1)---------------{10: 1.2, 20: 2.3, 40: 1.3, 50: 1.2}
>>> ks=d1.keys()
>>> print(ks,type(ks))--------dict_keys([10, 20, 40, 50]) <class 'dict_keys'>
>>> for k in ks:
...		print(k)
...
			10
			20
			40
			50
>>> for k in d1.keys():
...		print(k)
...
		10
		20
		40
		50
>>> for k in {"Kar":"Bang","Tamil":"Che","MH":"Mum"}.keys():
...		print(k)
...
		Kar
		Tamil
		MH
-----------------------------------------------------------------------------------------------------------------------------------
7) values()
-----------------------------------------------------------------------------------------------------------------------------------
Syntax:       varname=dictobj.values()
=>This Function is used for Obtaining set of Values and placed in LHS Var Name and whose type <class,dict_values>
-------------------
Examples
-------------------
>>> d1={10:1.2,20:2.3,40:1.3,50:1.2}
>>> print(d1)----------------{10: 1.2, 20: 2.3, 40: 1.3, 50: 1.2}
>>> vs=d1.values()
>>> print(vs,type(vs))-----------dict_values([1.2, 2.3, 1.3, 1.2]) <class 'dict_values'>
>>> for v in vs:
...		print(v)
...
		1.2
		2.3
		1.3
		1.2
>>> for v in d1.values():
...		print(v)
...
		1.2
		2.3
		1.3
		1.2
>>> for v in {"Kar":"Bang","Tamil":"Che","MH":"Mum"}.values():
...		print(v)
...
		Bang
		Che
		Mum
NOTE:----------------------MOST IMP
------------
>>> for v in {"Kar":"Bang","Tamil":"Che","MH":"Mum"}:
...		print(v)
...
		Kar
		Tamil
		MH
>>> for v in {"Kar":"Bang","Tamil":"Che","MH":"Mum"}:
...		print(v,"--->",{"Kar":"Bang","Tamil":"Che","MH":"Mum"}.get(v))
...
		Kar ---> Bang
		Tamil ---> Che
		MH ---> Mum
-----------------------------------------------------------------------------------------------------------------------------------
8) items()
-----------------------------------------------------------------------------------------------------------------------------------
Syntax:       varname=dictobj.items()
=>This Function is used for Obtaining (Key,Value) from dict object  and placed in LHS Var Name and whose type 
    <class,dict_items>
-------------------------------
Examples
-------------------------------
>>> d1={10:1.2,20:2.3,40:1.3,50:1.2}
>>> print(d1)------------{10: 1.2, 20: 2.3, 40: 1.3, 50: 1.2}
>>> its=d1.items()
>>> print(its,type(its))---------dict_items([(10, 1.2), (20, 2.3), (40, 1.3), (50, 1.2)]) <class 'dict_items'>
>>> for x in its:
...		print(x,type(x))
...
		(10, 1.2) <class 'tuple'>
		(20, 2.3) <class 'tuple'>
		(40, 1.3) <class 'tuple'>
		(50, 1.2) <class 'tuple'>
>>> for x in d1.items():
...		print(x,type(x))
...
		(10, 1.2) <class 'tuple'>
		(20, 2.3) <class 'tuple'>
		(40, 1.3) <class 'tuple'>
		(50, 1.2) <class 'tuple'>
>>> for k,v in d1.items():
...		print(k,"--->",v)
...
		10 ---> 1.2
		20 ---> 2.3
		40 ---> 1.3
		50 ---> 1.2
-----------------------------------------------------------------------------------------------------------------------------------
9) update()
-----------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   dictobj1.update(dictobj2)
=>This Function is used for Updating (Inserting OR Modifying) the (Key,value) of dict object with DictObject values.
-----------------------
Examples
-----------------------
>>> d1={10:1.2,20:2.3}
>>> d2={"Python":1,"C":2}
>>> d1.update(d2)
>>> print(d1)----------{10: 1.2, 20: 2.3, 'Python': 1, 'C': 2}
>>> d2.update(d1)
>>> print(d2)----------{'Python': 1, 'C': 2, 10: 1.2, 20: 2.3}
---------------------
>>> d1={10:1.2,20:2.3}
>>> d2={10:11.2,30:2.3}
>>> d1.update(d2)
>>> print(d1)--------------{10: 11.2, 20: 2.3, 30: 2.3}
==============================================================================================

